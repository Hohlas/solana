#!/usr/sbin/nft -f
# include "/etc/nftables_counter.conf" # счетчик трафика для настройки

# Фильтрация трафика фаерволом, затем защита от DDoS.
# Устанавливает лимиты на различные типы пакетов и 
# фиксирует подозрительную активность в /var/log/kern.log

table ip filter {

    define TCP_PORTS = { 2010, 8000-8001, 8899-8900, 11226 }
    define UDP_PORTS = { 8000-8020, 10000-10007, 11227-11229 }

    # счетчики для отслеживания количества пакетов ICMP, TCP и UDP
    counter icmp_flood_counter {}
    counter tcp_flood_counter {}
    counter udp_flood_counter {}
    counter portscan_counter {}
    
    # Создаем наборы для хранения IP-адресов нарушителей
    set icmp_track {
        type ipv4_addr
        size 65535
        flags dynamic
        timeout 10s
    }
    
    set tcp_track {
        type ipv4_addr
        size 65535
        flags dynamic
        timeout 60s
    }

    set udp_track {
        type ipv4_addr
        size 65535
        flags dynamic
        timeout 10s
    }

    set portscan {
        type ipv4_addr
        size 65535
        flags dynamic
        timeout 60s
    }

    chain input { # Фаервол
        type filter hook input priority -1; policy drop;
            # type filter -  цепочка для фильтрации пакетов
            # hook input - цепочка обрабатывает входящие пакеты
            # priority -  приоритет цепочки (меньше число = выше приоритет)
            # policy drop - все входящие пакеты будут отброшены, если они не соответствуют никаким правилам в этой цепочке

        ct state established,related accept # Разрешаются установленные соединения
        iif lo accept # разрешает локальный трафик
        icmp type echo-request accept  # чтобы пинг проходил
        # Защита от сканирования - проверяем ДО разрешения портов
        ip protocol tcp ct state new,untracked \
            update @portscan { ip saddr limit rate over 200/minute } \
            counter name "portscan_counter" \
            log prefix "[NFT] PORT-SCAN: " flags all \
            drop  

        # Правила фаервола
        tcp dport $TCP_PORTS accept # Разрешаем входящие TCP соединения
        udp dport $UDP_PORTS accept # Разрешаем входящие UDP соединения
        
    }

    chain ddos_protection  {
        type filter hook input priority 0;
        # приоритет ниже, чем "input" т.е. работает после отфильтрованного фаерволом трафика 
        # нет политики по умолчанию "policy", т.е. обрабатываются только пакеты, соответствующие заданным правилам.
        
        # ICMP flood защита - Ограничивает количество ICMP-запросов (ping)
        icmp type echo-request \
            update @icmp_track { ip saddr limit rate over 30/second burst 30 packets } \
            counter name "icmp_flood_counter" \
            log prefix "[NFT] ICMP-DDOS: " flags all \
            drop

        # TCP flood защита - Ограничивает количество новых TCP-соединений
        tcp flags & (fin|syn|rst|ack) == syn \
            tcp dport $TCP_PORTS \
            update @tcp_track { ip saddr limit rate over 100/second burst 100 packets } \
            counter name "tcp_flood_counter" \
            log prefix "[NFT] TCP-DDOS: " flags all \
            drop

        # UDP flood защита - Ограничивает количество UDP-пакетов
        ip protocol udp \
            udp dport $UDP_PORTS \
            update @udp_track { ip saddr limit rate over 100000/second burst 20000 packets } \
            counter name "udp_flood_counter" \
            log prefix "[NFT] UDP-DDOS: " flags all \
            drop
  
    }
}

