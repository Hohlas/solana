#!/usr/sbin/nft -f
# include "/etc/nftables_counter.conf" # подключение счетчика трафика для настройки

# Фильтрация трафика фаерволом.
# Защита от DDOS: Добавляет IP в блэклист на 120сек за подозрительную активность 
# Логирует подозрительную активность в /var/log/kern.log с меткой [NFT]
# Определяет аттаки:
#  ICMP - echo-запросы (ping) 10 пакетов/сек, с всплесками до 20 пакетов 
#  TCP - ограничивает кол-во TCP соединений от IP до 100/минуту, с всплесками до 100 packets
#  UDP - ограничивает кол-во UDP соединений от IP до 100000/сек, с всплесками до 20000 packets
#  Port scan - Защита от сканирования портов чаще чем 200 в минуту

table ip filter {
    # Набор портов соланы для фаервола
    define TCP_PORTS = { 2010, 8000-8009, 8900, 11226 } # 8899-RPC closed
    define UDP_PORTS = { 8000-8020, 10000-10007, 11227-11229, 4819-4820 }

    # счетчики для отслеживания количества пакетов ICMP, TCP и UDP
    counter icmp_flood_counter {}
    counter tcp_flood_counter {}
    counter udp_flood_counter {}
    counter portscan_counter {}
    
    # Наборы для хранения IP-адресов нарушителей
    set icmp_track {   # Набор для отслеживания частоты ICMP пакетов
        type ipv4_addr # Тип хранимых данных - IPv4 адреса
        size 65535     # Максимальное количество уникальных IP адресов
        flags dynamic  # Автоматическое добавление/удаление записей
        timeout 10s    # Очистка записи если нет активности 10 секунд
    }
    set tcp_track {
        type ipv4_addr
        size 65535
        flags dynamic
        timeout 60s
    }
    set udp_track {
        type ipv4_addr
        size 65535
        flags dynamic
        timeout 10s
    }
    set portscan {
        type ipv4_addr
        size 65535
        flags dynamic
        timeout 60s
    }

    # Набор блэклистов для длительной блокировки нарушителей
    set blacklist {
        type ipv4_addr         # Хранит IPv4 адреса нарушителей
        flags dynamic,timeout  # Динамическое добавление/удаление IP с таймаутом
        timeout 120s           # Автоматическое удаление IP через 120 секунд
    }
    
    chain blacklist_block { # Блокировка нарушителей из блэклиста
        type filter hook input priority -2
        ip saddr @blacklist drop
    }

    chain input { # Фаервол + защита от сканирования портов
        type filter hook input priority -1; policy drop;
            # type filter -  цепочка для фильтрации пакетов
            # hook input - цепочка обрабатывает входящие пакеты
            # priority -  приоритет цепочки (меньше число = выше приоритет)
            # policy drop - все входящие пакеты будут отброшены, если они не соответствуют никаким правилам в этой цепочке

        ct state established,related accept # Разрешаются установленные соединения
        iif lo accept # разрешает локальный трафик
        icmp type echo-request accept  # чтобы пинг проходил 

        # Правила фаервола для списка портов
        tcp dport $TCP_PORTS accept # Разрешаем входящие TCP соединения
        udp dport $UDP_PORTS accept # Разрешаем входящие UDP соединения
        
    }

    chain ddos_protection  {
        type filter hook input priority 0;
        # приоритет ниже, чем "input" т.е. работает после отфильтрованного фаерволом трафика 
        # нет политики по умолчанию "policy", т.е. обрабатываются только пакеты, соответствующие заданным правилам.
        
        # ICMP flood защита - Ограничивает количество ICMP-запросов (ping)
        icmp type echo-request \
            update @icmp_track { ip saddr limit rate over 10/second burst 20 packets } \
            add @blacklist { ip saddr } \
            counter name "icmp_flood_counter" \
            log prefix "[NFT] ICMP-DDOS: " flags all \
            drop

        # TCP flood - Ограничение частоты TCP SYN-пакетов (запросов на установление соединения в минуту) от одного IP
        tcp flags & (fin|syn|rst|ack) == syn \
            tcp dport $TCP_PORTS \
            update @tcp_track { ip saddr limit rate over 100/minute burst 50 packets } \
            add @blacklist { ip saddr } \
            counter name "tcp_flood_counter" \
            log prefix "[NFT] TCP-DDOS: " flags all \
            drop

        # UDP flood - Ограничение количества UDP-пакетов от одного IP
        #ip protocol udp \
         #   udp dport $UDP_PORTS \
          #  update @udp_track { ip saddr limit rate over 100000/second burst 20000 packets } \
           # add @blacklist { ip saddr } \
           # counter name "udp_flood_counter" \
           # log prefix "[NFT] UDP-DDOS: " flags all \
           # drop

        ip protocol udp udp dport $UDP_PORTS accept # убрать UDP лимит вообще

    }
}

# ip protocol udp - Фильтр для UDP протокола
# udp dport $UDP_PORTS - Применяется к заданным UDP портам
# update @udp_track { ip saddr limit rate over 10/second burst 20 packets } - добавляет в набор udp_track адреса с частотой пакетов выше 10/с, разрешается "всплеск" до 30 пакетов 
# add @blacklist { ip saddr } - За превышение добавляет IP в набор blacklist на 120 секунд
# counter name "udp_flood_counter" - Считает заблокированные пакеты
# log prefix "[NFT] UDP-DDOS: " flags all - Логирует событие блокировки
# drop - Отбрасывает пакеты от нарушителя
